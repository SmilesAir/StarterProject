# serverless.yml
service: CompleteJudging

provider:
  name: aws
  runtime: nodejs8.10
  region: us-west-2
  stage: ${opt:stage, "development"}

  environment:
    ACTIVE_TOURNAMENT_KEYS: ${self:provider.stage}-activeTournamentKeys
    TOURNAMENT_INFO: ${self:provider.stage}-tournamentInfo
    ACTIVE_POOLS: ${self:provider.stage}-activePools
    ACTIVE_RESULTS: ${self:provider.stage}-activeResults

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ACTIVE_TOURNAMENT_KEYS}"
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TOURNAMENT_INFO}"
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ACTIVE_POOLS}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ACTIVE_RESULTS}"

functions:
  testLambda:
    handler: source/test.testLambda
    events:
      - http:
          path: testPost
          method: post
          cors: true
  createTournament:
    handler: source/createTournament.handler
    events:
      - http:
          path: createTournament
          method: post
          cors: true
  getActiveTournaments:
    handler: source/getActiveTournaments.handler
    events:
      - http:
          path: getActiveTournaments
          method: get
          cors: true
  hideTournament:
    handler: source/createTournament.handler
    events:
      - http:
          path: hideTournament
          method: post
          cors: true
  finishTournament:
    handler: source/createTournament.handler
    events:
      - http:
          path: finishTournament
          method: post
          cors: true
  setPlayingPool:
    handler: source/setPlayingPool.handler
    events:
      - http:
          path: setPlayingPool
          method: post
          cors: true
  getPlayingPool:
    handler: source/getPlayingPool.handler
    events:
      - http:
          path: getPlayingPool
          method: get
          cors: true
  reportJudgeScore:
    handler: source/reportJudgeScore.handler
    events:
      - http:
          path: reportJudgeScore
          method: post
          cors: true
  getPoolResults:
    handler: source/getPoolResults.handler
    events:
      - http:
          path: getPoolResults
          method: get
          cors: true

resources:
  Resources:
    activeTournamentKeys:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ACTIVE_TOURNAMENT_KEYS}
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    tournamentInfo:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TOURNAMENT_INFO}
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    activePools:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ACTIVE_POOLS}
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    activeResults:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ACTIVE_RESULTS}
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
